!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Grammar	prog.hpp	/^typedef std::map<std::string, Rule_collection> Grammar;$/;"	t
Rule	prog.hpp	/^typedef std::vector<std::string> Rule;$/;"	t
Rule_collection	prog.hpp	/^typedef std::vector<Rule> Rule_collection;$/;"	t
bracketed	prog.cpp	/^bool bracketed(const string& s)$/;"	f
gen_aux	prog.cpp	/^void gen_aux(const Grammar& g, const string& word, vector<string>& ret)$/;"	f
gen_sentence	prog.cpp	/^vector<string> gen_sentence(const Grammar& g)$/;"	f
main	build/meson-private/sanitycheckcpp.cc	/^class breakCCompiler;int main(int argc, char **argv) { return 0; }$/;"	f
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test.cpp	/^int main(int argc, char *argv[])$/;"	f
not_space	prog.cpp	/^bool not_space(char c)$/;"	f
nrand	prog.cpp	/^int nrand(int n)$/;"	f
read_grammar	prog.cpp	/^Grammar read_grammar(istream& in)$/;"	f
space	prog.cpp	/^bool space(char c)$/;"	f
split	prog.cpp	/^vector<string> split(const string& str)$/;"	f
